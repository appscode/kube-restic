name: CI

on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - master

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.14
      uses: actions/setup-go@v1
      with:
        go-version: 1.14
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Set up Docker Buildx
      id: buildx
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        buildx-version: latest
        qemu-version: latest

    - name: Available platforms
      run: echo ${{ steps.buildx.outputs.platforms }}

    - name: Prepare Host
      run: |
        sudo apt-get -qq update || true
        sudo apt-get install -y bzr
        curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.17.0/bin/linux/amd64/kubectl
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

    - name: Run checks
      run: |
        make ci

    - name: Build
      env:
        REGISTRY: appscodeci
        DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        USERNAME: 1gtm
      run: |
        docker login --username ${USERNAME} --password ${DOCKER_TOKEN}
        make push

  kubernetes:
    name: Kubernetes
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        cluster:
        - {"version": "v1.11.10", "config": "kind.yaml"}
        - {"version": "v1.12.10", "config": "kind.yaml"}
        - {"version": "v1.14.10", "config": "kind.yaml"}
        - {"version": "v1.16.9", "config": "kind.yaml"}
        - {"version": "v1.18.2", "config": "kind.yaml"}
        - {"version": "v1.18.2", "config": "kind-psp.yaml"}

    steps:

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Create Kubernetes ${{ matrix.cluster.version }} cluster
      id: kind
      uses: engineerd/setup-kind@v0.3.0
      with:
        version: v0.7.0
        config: hack/kubernetes/${{ matrix.cluster.config }}
        image: kindest/node:${{ matrix.cluster.version }}

    - name: Setup PSP
      id: psp
      if: matrix.cluster.config == 'kind-psp.yaml'
      run: |
        echo "create standard pod security policies"
        kubectl apply -f https://github.com/appscodelabs/tasty-kube/raw/master/psp/privileged-psp.yaml
        kubectl apply -f https://github.com/appscodelabs/tasty-kube/raw/master/psp/baseline-psp.yaml
        kubectl apply -f https://github.com/appscodelabs/tasty-kube/raw/master/psp/restricted-psp.yaml
        echo "create roles and rolebindings for psp"
        kubectl apply -f https://github.com/appscodelabs/tasty-kube/raw/master/kind/psp/cluster-roles.yaml
        kubectl apply -f https://github.com/appscodelabs/tasty-kube/raw/master/kind/psp/role-bindings.yaml

    - name: Prepare cluster for testing
      id: local-path
      env:
        DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        USERNAME: 1gtm
        REGISTRY_SECRET: regcred
      run: |
        echo "waiting for nodes to be ready ..."
        kubectl wait --for=condition=Ready nodes --all --timeout=10m
        kubectl get nodes
        echo
        kubectl version --short
        echo
        echo "create docker-registry secret"
        kubectl create secret docker-registry ${REGISTRY_SECRET} --namespace=kube-system --docker-server=https://index.docker.io/v1/ --docker-username=${USERNAME} --docker-password=${DOCKER_TOKEN}

    - name: Install NFS server dependencies
      run: |
        nodes=$(kubectl get nodes -o=jsonpath='{range .items[*]}{.metadata.name}{"\t"}{end}')
        for i in $nodes
        do
          echo "Installing NFS server dependencies in node: $i ...."
          docker exec $i apt-get update
          docker exec $i apt-get install -y nfs-kernel-server
        done

    - name: Check out installer
      run: |
        cd ..
        git clone https://github.com/stashed/installer.git
        cd installer
        git checkout master

    - name: Run e2e tests
      env:
        REGISTRY: appscodeci
        REGISTRY_SECRET: regcred
        TEST_CREDENTIALS: ${{ secrets.TEST_CREDENTIALS }}
        GOOGLE_SERVICE_ACCOUNT_JSON_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON_KEY }}
      run: |
        echo "preparing test credentials"
        mkdir -p hack/config
        echo -n "$TEST_CREDENTIALS" > hack/config/.env
        echo >> hack/config/.env
        echo "GOOGLE_SERVICE_ACCOUNT_JSON_KEY=$(echo $GOOGLE_SERVICE_ACCOUNT_JSON_KEY)" >> hack/config/.env
        make install
        echo
        sleep 10
        make e2e-parallel
