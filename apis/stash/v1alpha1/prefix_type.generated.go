// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1alpha1

import (
	"errors"
	"fmt"
	"reflect"
	"runtime"

	codec1978 "github.com/ugorji/go/codec"
)

const (
	// ----- content types ----
	codecSelferC_UTF85631 = 1
	codecSelferC_RAW5631  = 0
	// ----- value types used ----
	codecSelferValueTypeArray5631 = 10
	codecSelferValueTypeMap5631   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey5631    = 2
	codecSelfer_containerMapValue5631  = 3
	codecSelfer_containerMapEnd5631    = 4
	codecSelfer_containerArrayElem5631 = 6
	codecSelfer_containerArrayEnd5631  = 7
)

var (
	codecSelferBitsize5631                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr5631 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer5631 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
	}
}

func (x PrefixType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer5631
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1 := z.EncBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else if !yym1 && z.IsJSONHandle() {
		z.EncJSONMarshal(x)
	} else {
		r.EncodeInt(int64(x))
	}
}

func (x *PrefixType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer5631
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else if !yym1 && z.IsJSONHandle() {
		z.DecJSONUnmarshal(x)
	} else {
		*((*int)(x)) = int(r.DecodeInt(codecSelferBitsize5631))
	}
}
